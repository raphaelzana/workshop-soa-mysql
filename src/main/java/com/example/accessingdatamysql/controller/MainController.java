package com.example.accessingdatamysql.controller;

import com.example.accessingdatamysql.repository.*;

import java.net.URI;
import java.util.List;
import java.util.Optional;

import javax.persistence.EntityNotFoundException;

import com.example.accessingdatamysql.model.*;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
//import org.springframework.web.bind.annotation.RequestParam;
//import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.support.ServletUriComponentsBuilder;

@Controller // This means that this class is a Controller
@RequestMapping(path="/demo") // This means URL's start with /demo (after Application path)
public class MainController {
  @Autowired // This means to get the bean called userRepository
         // Which is auto-generated by Spring, we will use it to handle the data
  private UserRepository userRepository;

  /*@PostMapping(path="/add") // Map ONLY POST Requests
  public @ResponseBody String addNewUser (@RequestParam final String name
      , @RequestParam final String email) {
    // @ResponseBody means the returned String is the response, not a view name
    // @RequestParam means it is a parameter from the GET or POST request

    final User n = new User();
    n.setName(name);
    n.setEmail(email);
    userRepository.save(n);
    return "Saved";
  }*/

  @PostMapping(path="/add")
	public ResponseEntity<User> insert(@RequestBody User obj) {
		obj = userRepository.save(obj);
		URI uri = ServletUriComponentsBuilder.fromCurrentRequest().path("/{id}")
				.buildAndExpand(obj.getId()).toUri();
		return ResponseEntity.created(uri).body(obj);
  }
  
  @GetMapping(value = "/{id}")
	public ResponseEntity<User> findById(@PathVariable Integer id) throws Exception {
    Optional<User> obj = userRepository.findById(id);
    return ResponseEntity.ok().body(obj.orElseThrow(() -> new Exception()));
  }
  
  @PutMapping(value = "/{id}")
	public ResponseEntity<User> update(@PathVariable Integer id, @RequestBody User obj) throws Exception {
    try {
			User entity = userRepository.getOne(id);
			updateData(entity, obj);
      obj = userRepository.save(entity);
      return ResponseEntity.ok().body(obj);
		} catch (EntityNotFoundException e) {
			throw new Exception(e.getMessage());
		} 
  }
  
  private void updateData(User entity, User obj) {
		entity.setName(obj.getName());
		entity.setEmail(obj.getEmail());
	}

  @GetMapping(path="/all")
  public ResponseEntity<List<User>> getAllUsers() {
    // This returns a JSON or XML with the users
    List<User> list = userRepository.findAll();
		return ResponseEntity.ok().body(list);
  }

  @DeleteMapping(value = "/{id}")
	public ResponseEntity<Void> delete(@PathVariable Integer id) throws Exception {
    try {
			userRepository.deleteById(id);
		} catch (EmptyResultDataAccessException e) {
			throw new Exception(e.getMessage());
		} catch (DataIntegrityViolationException e) {
			throw new Exception(e.getMessage());
		}
		return ResponseEntity.ok().build();
	}

}